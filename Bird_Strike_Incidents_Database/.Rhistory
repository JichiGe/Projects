plot(cars)
head(mtcars,4)
head(mtcars,4)
mean(mtcars$mpg)
mean(mtcars$mpg)
head(mtcars,4)
```{r eval=FALSE}
```{r}
plot(cars)
head(mtcars,4)
library(RSQLite)
fpath = "E:/temp/5200/test"
dbfile = "committeeDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/test"
dbfile = "committeeDB.sqlite"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
View(dbcon)
library(RSQLite)
fpath = "C:/temp"
dbfile = "JichiA3CS5200Sp22.Rmd"
library(RSQLite)
fpath = "C:/temp"
dbfile = "JichiA3CS5200Sp22.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "JichiA3CS5200Sp22.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "JichiA3CS5200Sp22.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "JichiA3CS5200Sp22.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "JichiA3CS5200Sp22.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "JichiA3CS5200Sp23.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "JichiA3CS5200Sp23.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "JichiA3CS5200Sp23.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "JichiA3CS5200Sp23.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "A3CS5200Sp23.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "A3CS5200Sp23.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "A3CS5200Sp23.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "A3CS5200Sp23.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
con <- dbConnect(RSQLite::SQLite(), "MediaDB.db")
library(RSQLite)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "MediaDB.db")
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment3"
dbfile = "JichiA3CS5200Fall23.Rmd"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), "MediaDB.db")
library(RSQLite)
dbfile = "MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), "MediaDB.db")
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "MediaDB.db")
library(RSQLite)
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), "MediaDB.db")
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), "MediaDB.db")
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "MediaDB.db")
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(con)
library(RSQLite)
fpath = "E:/temp/5200/assignment4"
dbfile = "MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "MediaDB.db")
library(RSQLite)
dbfile <- "E:/temp/5200/assignment4/MediaDB.db"
con <- dbConnect(RSQLite::SQLite(), dbfile)
library(RSQL)
dbfile <- "E:/temp/5200/assignment5/A5Sample.db"
con <- dbConnect(RSQLite::SQLite(), dbfile)
library(RSQL)
dbfile <- "E:/temp/5200/assignment5/A5Sample.db"
con <- dbConnect(RSQLite::SQLite(), dbfile)
library(RSQLite)
dbfile <- "E:/temp/5200/assignment5/A5Sample.db"
con <- dbConnect(RSQLite::SQLite(), dbfile)
library(RSQLite)
dbfile <- "E:/temp/5200/assignment5/A5Sample.db"
con <- dbConnect(RSQLite::SQLite(), dbfile)
library(RSQLite)
dbfile <- "E:/temp/5200/assignment5/A5Sample.db"
con <- dbConnect(RSQLite::SQLite(), dbfile)
if(!require(installr)) {
install.packages("installr");
require(installr)
}
updateR()
library(DBI)
library(RMySQL)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
fpath = "E:/temp/Database_GroupProject_1/Database_GroupProject_1/"
dbFile = "BirdStrikesData.csv"
fullPath = paste0(fpath, dbFile)
birdStrikesData <- read.csv(fullPath)
colnames(birdStrikesData)
head(birdStrikesData)
nrow(birdStrikesData)
birdStrikesData <- birdStrikesData[!birdStrikesData$Aircraft..Type == "",]
birdStrikesData <- birdStrikesData[birdStrikesData$Aircraft..Number.of.engines. >= 1 &
birdStrikesData$Aircraft..Number.of.engines. <= 4, ]
nrow(birdStrikesData)
birdStrikesData <- birdStrikesData %>%
group_by(Aircraft..Type, Aircraft..Make.Model, Aircraft..Number.of.engines., Aircraft..Airline.Operator) %>%
mutate(AircraftID=cur_group_id()) %>%
ungroup
birdStrikesData <- birdStrikesData %>%
group_by(Airport..Name, Origin.State) %>%
mutate(AirportID=cur_group_id()) %>%
ungroup
birdStrikesData <- birdStrikesData %>%
group_by(Wildlife..Number.struck, Wildlife..Number.Struck.Actual, Wildlife..Size, Wildlife..Species) %>%
mutate(WildlifeID=cur_group_id()) %>%
ungroup
colnames(birdStrikesData)
aircraftColumns = c('AircraftID', 'Aircraft..Type', 'Aircraft..Make.Model', 'Aircraft..Number.of.engines.', 'Aircraft..Airline.Operator')
AircraftDF <- birdStrikesData[aircraftColumns]
AircraftDF <- AircraftDF[!duplicated(AircraftDF), ]
head(AircraftDF)
airportColumns = c('AirportID', 'Airport..Name', 'Origin.State')
AirportDF <- birdStrikesData[airportColumns]
AirportDF <- AirportDF[!duplicated(AirportDF), ]
head(AirportDF)
wildlifeColumns = c('WildlifeID', 'Wildlife..Number.struck', 'Wildlife..Number.Struck.Actual', 'Wildlife..Size', 'Wildlife..Species')
wildlifeDF <- birdStrikesData[wildlifeColumns]
wildlifeDF <- wildlifeDF[!duplicated(wildlifeDF), ]
head(wildlifeDF)
incidentColumns = c('Record.ID', 'AircraftID', 'AirportID', 'WildlifeID', 'Effect..Impact.to.flight', 'FlightDate', 'Effect..Indicated.Damage',
'When..Phase.of.flight', 'Cost..Total..', 'Number.of.people.injured', 'Is.Aircraft.Large.', 'Pilot.warned.of.birds.or.wildlife.')
incidentDF <- birdStrikesData[incidentColumns]
incidentDF$FlightDate <- format(as.Date(incidentDF$FlightDate, format="%m/%d/%Y"), '%Y-%m-%d %H:%M:%S')
incidentDF <- incidentDF[!duplicated(incidentDF), ]
head(incidentDF)
dbcon <- dbConnect(RMySQL::MySQL(), username="newuser", password="password123456")
summary(dbcon)
dbListTables(dbcon)
names(AirportDF)[names(AirportDF) == 'Airport..Name'] <- 'Name'
names(AirportDF)[names(AirportDF) == 'Origin.State'] <- 'OriginState'
names(AirportDF)
dbWriteTable(dbcon, name="airport", value=AirportDF, append=TRUE, row.names=FALSE)
names(AircraftDF)[names(AircraftDF) == 'Aircraft..Type'] <- 'AircraftType'
names(AircraftDF)[names(AircraftDF) == 'Aircraft..Make.Model'] <- 'Model'
names(AircraftDF)[names(AircraftDF) == 'Aircraft..Number.of.engines.'] <- 'NumberOfEngines'
names(AircraftDF)[names(AircraftDF) == 'Aircraft..Airline.Operator'] <- 'Airline'
AircraftDF
dbWriteTable(dbcon, name="aircraft", value=AircraftDF, append=TRUE, row.names=FALSE)
names(wildlifeDF)[names(wildlifeDF) == 'Wildlife..Number.struck'] <- 'NumberStruck'
names(wildlifeDF)[names(wildlifeDF) == 'Wildlife..Number.Struck.Actual'] <- 'NumberStruckActual'
names(wildlifeDF)[names(wildlifeDF) == 'Wildlife..Size'] <- 'Size'
names(wildlifeDF)[names(wildlifeDF) == 'Wildlife..Species'] <- 'Species'
dbWriteTable(dbcon, name="wildlife", value=wildlifeDF, append=TRUE, row.names=FALSE)
names(incidentDF)[names(incidentDF) == 'Record.ID'] <- 'RecordID'
names(incidentDF)[names(incidentDF) == 'Effect..Impact.to.flight'] <- 'ImpactToFlight'
names(incidentDF)[names(incidentDF) == 'FlightDate'] <- 'FlightDate'
names(incidentDF)[names(incidentDF) == 'Effect..Indicated.Damage'] <- 'IndicatedDamage'
names(incidentDF)[names(incidentDF) == 'When..Phase.of.flight'] <- 'PhaseOfFlight'
names(incidentDF)[names(incidentDF) == 'Cost..Total..'] <- 'RepairCost'
names(incidentDF)[names(incidentDF) == 'Number.of.people.injured'] <- 'NumberOfPeopleInjured'
names(incidentDF)[names(incidentDF) == 'Is.Aircraft.Large.'] <- 'IsAircraftLarge'
names(incidentDF)[names(incidentDF) == 'Pilot.warned.of.birds.or.wildlife.'] <- 'PilotWarned'
colnames(incidentDF)
head(incidentDF[order(incidentDF$RecordID),])
dbWriteTable(dbcon, name="incident", value=incidentDF, append=TRUE, row.names=FALSE)
sql_query <- "SELECT * FROM NumberOfIncidentCompare;"
result <- dbGetQuery(dbcon, sql_query)
custom_colors <- brewer.pal(n = 3, name = "Blues")
ggplot(result, aes(x = Year, y = NumberOfIncidents, fill = PhaseOfFlight)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Bird Strikes by Year and Phase of Flight",
x = "Year",
y = "Number of Bird Strikes") + theme_classic() +
scale_fill_manual(values = custom_colors)
unique_years <- unique(result$Year)
custom_colors <- brewer.pal(n = 3, name = "Blues")
for (year in unique_years) {
year_data <- subset(result, Year == year)
pie_chart <- ggplot(year_data, aes(x = "", y = NumberOfIncidents, fill = PhaseOfFlight)) +
geom_bar(stat = "identity") +
coord_polar(theta = "y") +
theme_void() +
geom_text(aes(label = scales::percent(NumberOfIncidents / sum(NumberOfIncidents))),
position = position_stack(vjust = 0.5)) +
labs(title = paste("Phase of Flight For Year", year))+ scale_fill_manual(values = custom_colors)
print(pie_chart)
}
dbDisconnect(dbcon)
